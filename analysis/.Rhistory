topstories %>%
inner_join(rank_one_joiner, by = c("id")) %>%
mutate(rank_at_timestamp = as.numeric(rank_at_timestamp)) %>%
ggplot(aes(x = slice_timestamp, y = rank_at_timestamp, color = id)) +
geom_point(size = 0.7, alpha = 0.8) +
geom_line(size = 0.7, alpha = 0.6) +
scale_y_continuous(trans = "reverse", limits = c(min_rank, 1)) +
theme_hn() +
theme(legend.position = "None") +
NULL
ggsave("topstory_development.jpg", width = 8, height = 4)
min_rank <- 160
topstories %>%
filter(rank_at_timestamp == 1) %>%
select(id) %>%
unique() -> rank_one_joiner
topstories %>%
inner_join(rank_one_joiner, by = c("id")) %>%
mutate(rank_at_timestamp = as.numeric(rank_at_timestamp)) %>%
ggplot(aes(x = slice_timestamp, y = rank_at_timestamp, color = id)) +
geom_point(size = 0.2, alpha = 0.8) +
geom_line(size = 0.2, alpha = 0.6) +
scale_y_continuous(trans = "reverse", limits = c(min_rank, 1)) +
theme_hn() +
theme(legend.position = "None") +
NULL
ggsave("topstory_development.jpg", width = 8, height = 4)
color_scheme <- viridis::viridis(dim(rank_one_joiner)[1])
color_scheme
color_scheme <- sample(viridis::viridis(dim(rank_one_joiner)[1]))
color_scheme
min_rank <- 160
topstories %>%
filter(rank_at_timestamp == 1) %>%
select(id) %>%
unique() -> rank_one_joiner
color_scheme <- sample(viridis::viridis(dim(rank_one_joiner)[1]))
topstories %>%
inner_join(rank_one_joiner, by = c("id")) %>%
mutate(rank_at_timestamp = as.numeric(rank_at_timestamp)) %>%
ggplot(aes(x = slice_timestamp, y = rank_at_timestamp, color = id)) +
geom_point(size = 0.2, alpha = 0.8) +
geom_line(size = 0.2, alpha = 0.6) +
scale_y_continuous(trans = "reverse", limits = c(min_rank, 1)) +
theme_hn() +
theme(legend.position = "None") +
NULL
ggsave("topstory_development.jpg", width = 8, height = 4)
min_rank <- 160
topstories %>%
filter(rank_at_timestamp == 1) %>%
select(id) %>%
unique() -> rank_one_joiner
color_scheme <- sample(viridis::viridis(dim(rank_one_joiner)[1]))
topstories %>%
inner_join(rank_one_joiner, by = c("id")) %>%
mutate(rank_at_timestamp = as.numeric(rank_at_timestamp)) %>%
ggplot(aes(x = slice_timestamp, y = rank_at_timestamp, color = id)) +
geom_point(size = 0.2, alpha = 0.8) +
geom_line(size = 0.2, alpha = 0.6) +
scale_color_manual(values = color_scheme) +
scale_y_continuous(trans = "reverse", limits = c(min_rank, 1)) +
theme_hn() +
theme(legend.position = "None") +
NULL
ggsave("topstory_development.jpg", width = 8, height = 4)
color_scheme <- sample(viridis::magma(dim(rank_one_joiner)[1]))
topstories %>%
inner_join(rank_one_joiner, by = c("id")) %>%
mutate(rank_at_timestamp = as.numeric(rank_at_timestamp)) %>%
ggplot(aes(x = slice_timestamp, y = rank_at_timestamp, color = id)) +
geom_point(size = 0.2, alpha = 0.8) +
geom_line(size = 0.2, alpha = 0.6) +
scale_color_manual(values = color_scheme) +
scale_y_continuous(trans = "reverse", limits = c(min_rank, 1)) +
theme_hn() +
theme(legend.position = "None") +
NULL
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
h1_data <- arrow::read_feather(file.path("..", "data", "h1_data.feather"))
eda_data <- arrow::read_feather(file.path("..", "data", "eda_data.feather"))
h1_data %<>%
mutate(id = as.factor(id),
creation_time = as.POSIXct(creation_time, origin = "1970-01-01", tz = "UTC"),
score = as.numeric(score),
comment_count = as.numeric(comment_count),
timestamp = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC"),
rank_at_timestamp = as.ordered(rank_at_timestamp))
eda_data %<>%
mutate(id = as.factor(id),
creation_time = as.POSIXct(creation_time, origin = "1970-01-01", tz = "UTC"),
score = as.numeric(score),
comment_count = as.numeric(comment_count),
timestamp = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC"),
rank_at_timestamp = as.ordered(rank_at_timestamp))
h1_data %>%
group_by(timestamp) %>%
summarize(timestamp = unique(timestamp)) %>%
ungroup() %>%
arrange(timestamp) -> timestamp_ordering
timestamp_ordering$ts_id <- 1:dim(timestamp_ordering)[1]
h1_data %<>% inner_join(timestamp_ordering, by = "timestamp")
plot_details <- theme_hn() +
theme(legend.position = "None",
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
h1_data %>%
filter(rank_at_timestamp <= 10) %>%
ggplot(aes(x = timestamp, y = score, color = id)) +
geom_point() +
geom_line() +
ggtitle("2 Minutes") +
plot_details +
theme(legend.position = "None",
plot.title = element_text(margin = margin(t = 10, b = 10))) -> p1
h1_data %>%
filter(rank_at_timestamp <= 10) %>%
filter(ts_id %% 2 == 0) %>%
ggplot(aes(x = timestamp, y = score, color = id)) +
geom_point() +
geom_line() +
ggtitle("4 Minutes") +
plot_details +
theme(legend.position = "None",
plot.title = element_text(margin = margin(t = 10, b = 10))) -> p2
h1_data %>%
filter(rank_at_timestamp <= 10) %>%
filter(ts_id %% 3 == 0) %>%
ggplot(aes(x = timestamp, y = score, color = id)) +
geom_point() +
geom_line() +
ggtitle("6 Minutes") +
plot_details +
theme(legend.position = "None",
plot.title = element_text(margin = margin(t = 10, b = 10))) -> p3
ggarrange(p1, p2, p3, nrow = 1) %>%
annotate_figure(top = text_grob(label = "Development of Top 10 Stories for Different Sampling Rates",
color = "grey20",
size = 15),
left = text_grob(label = "Score",
color = "grey20",
rot = 90),
bottom = text_grob(label = "Timestamp",
color = "grey20")) +
theme(plot.background = element_rect(color = "grey70", fill = "grey70", size = 1),
plot.margin = margin(15, 15, 15, 15)) +
NULL
newstories <- arrow::read_feather(file.path("..", "data", "newstories.feather"))
newstories %<>%
mutate(story_id = as.factor(story_id),
timestamp = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC"),
rank = as.numeric(rank))
newstories %>%
filter(rank <= 50) -> newstories_toppage
n_stories <- newstories_toppage$story_id %>% unique() %>% length()
color_scheme <- rep(c("black", "white"), n_stories)
newstories_toppage %>%
ggplot(aes(x = timestamp, y = rank, color = story_id, alpha = 30 - rank)) +
scale_color_manual(values = color_scheme) +
geom_point(size = 2) +
geom_line(size = 1) +
scale_y_continuous(trans = "reverse", breaks = seq(50, 1, -5)) +
theme(legend.position = "None") +
geom_hline(yintercept = 30, linetype = "dashed", color = "red", size = 2) +
theme_hn() +
theme(
panel.grid.minor.y = element_blank()
)
ggsave("test.jpg", width=10, height=5)
h1_data
# defaults and libraries
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
# load new stories data
newstories <- arrow::read_feather(file.path("..", "data", "newstories.feather"))
newstories %<>%
mutate(story_id = as.factor(story_id),
timestamp = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC"),
rank = as.numeric(rank))
# only consider ranks below 50
newstories %>% filter(rank <= 50) -> newstories_toppage
n_stories <- newstories_toppage$story_id %>% unique() %>% length()
color_scheme <- rep(c("black", "white"), n_stories)
# plot development of the "new" page
newstories_toppage %>%
ggplot(aes(x = timestamp, y = rank, color = story_id, alpha = 30 - rank)) +
scale_color_manual(values = color_scheme) +
geom_point(size = 2) +
geom_line(size = 1) +
scale_y_continuous(trans = "reverse", breaks = seq(50, 1, -5)) +
theme(legend.position = "None") +
geom_hline(yintercept = 30, linetype = "dashed", color = "red", size = 2) +
theme_hn() +
theme(panel.grid.minor.y = element_blank())
topstories <- arrow::read_feather(file.path("..", "data", "topstories.feather"))
topstories %<>%
mutate(id = as.factor(id),
creation_time = lubridate::as_datetime(creation_time),
score = as.numeric(score),
comment_count = as.numeric(comment_count),
scrape_timestamp = lubridate::as_datetime(scrape_timestamp),
slice_timestamp = lubridate::as_datetime(slice_timestamp),
rank_at_timestamp = as.ordered(rank_at_timestamp))
# general metrics
n_stories <- topstories$id %>% unique() %>% length()
n_creators <- topstories$creator_username %>% unique() %>% length()
n_stories
n_creators
time_interval <- max(topstories$scrape_timestamp) - min(topstories$scrape_timestamp)
time_interval
time_interval
typeof(time_interval)
float(time_interval)
as.numeric(time_interval)
as.numeric(time_interval) %>% round(3)
as.numeric(time_interval) %>% round(0)
as.numeric(time_interval) %>% round(2)
as.numeric(time_interval) %>% round(2) %>% format(2)
topstories
topstories %>%
group_by(slice_timestamp)
topstories %>%
group_by(slice_timestamp) %>%
summarize(n = n())
topstories %>%
group_by(slice_timestamp) %>%
summarize(scraping_delay = max(scrape_timestamp) - min(scrape_timestamp))
topstories %>%
group_by(slice_timestamp) %>%
summarize(scraping_delay = max(scrape_timestamp) - min(scrape_timestamp)) -> delay_data
delay_data
delay_data$scraping_delay %>% mean(9)
delay_data$scraping_delay %>% mean()
delay_data$scraping_delay %>% mean() %>% as.numeric()
# general metrics
n_stories <- topstories$id %>% unique() %>% length()
n_creators <- topstories$creator_username %>% unique() %>% length()
time_interval <- (max(topstories$scrape_timestamp) - min(topstories$scrape_timestamp)) %>% as.numeric()
time_interval %>% round(2) %>% format(2)
median_delay <- delay_data$scraping_delay %>% median() %>% as.numeric()
median_delay
median_delay <- delay_data$scraping_delay %>% median()
median_delay
sd_delay <- delay_data$scraping_delay %>% sd()
sd_delay
mean_delay %>% round(2) %>% format(2)
topstories %>%
group_by(slice_timestamp) %>%
summarize(scraping_delay = max(scrape_timestamp) - min(scrape_timestamp)) -> delay_data
mean_delay <- delay_data$scraping_delay %>% mean() %>% as.numeric()
median_delay <- delay_data$scraping_delay %>% median() %>% as.numeric()
sd_delay <- delay_data$scraping_delay %>% sd()
mean_delay %>% round(2) %>% format(2)
median_delay %>% round(2) %>% format(2)
sd_delay %>% round(2) %>% format(2)
delay_data %>%
ggplot(aes(x = scraping_delay)) +
geom_histogram()
max_delay <- delay_data$scraping_delay %>% max()
max_delay
max_delay <- delay_data$scraping_delay %>% max() %>% as.numeric()
max_delay
max_delay %>% round(2) %>% format(2)
# plot time delays
delay_data %>%
ggplot(aes(x = scraping_delay)) +
geom_histogram() +
theme_hn()
# plot time delays
delay_data %>%
ggplot(aes(x = scraping_delay)) +
geom_histogram(fill = "white", alpha = 0.5) +
theme_hn()
# plot time delays
delay_data %>%
ggplot(aes(x = scraping_delay)) +
geom_histogram(fill = "white", alpha = 0.7) +
theme_hn()
# plot time delays
delay_data %>%
ggplot(aes(x = scraping_delay)) +
geom_histogram(fill = "white", alpha = 0.7) +
labs(title = "Delays after the intended time slice",
x = "Scraping Delay",
y = "Count") +
theme_hn()
# plot time delays
delay_data %>%
ggplot(aes(x = scraping_delay)) +
geom_histogram(fill = "white", alpha = 0.7) +
labs(title = "Delays after the Intended Time Slice",
x = "Scraping Delay",
y = "Count") +
theme_hn() +
theme(plot.margin = margin(15, 15, 15, 15))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 90))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 90, vjust = 0))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.3))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggsave("test.jpg", width = 10, height = 5)
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.8))
ggsave("test.jpg", width = 10, height = 5)
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 0, vjust = 0.8))
ggsave("test.jpg", width = 10, height = 5)
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.8))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.2))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 0))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 1))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 0))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "4 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
ggsave("test.jpg", width = 10, height = 5)
topstories %>%
ggplot(aes(x = creation_time)) +
geom_density(color = "white", fill = "white", alpha = 0.5, size = 2) +
scale_x_datetime(date_breaks = "8 hours") +
labs(title = "When are Top Stories Posted?",
x = "Timestamp",
y = "KDE") +
theme_hn() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
ggsave("test.jpg", width = 10, height = 5)
topstories %>%
ggplot(aes(x = score)) +
geom_histogram(fill = "white", alpha = 0.7) +
labs(title = "Distribution of Scores (Overall)",
x = "Score",
y = "Count") +
theme_hn() +
theme(plot.margin = margin(15, 15, 15, 15))
topstories %>%
filter(comment_count < 500) %>%
ggplot(aes(x = comment_count)) +
geom_histogram(binwidth = 10, fill = "white") +
labs(title = "Distribution of Number of Comments (Overall)",
x = "Number of Comments",
y = "Count") +
theme_hn()
topstories %>%
filter(comment_count < 500) %>%
ggplot(aes(x = comment_count)) +
geom_histogram(binwidth = 10, fill = "white", alpha = 0.7) +
labs(title = "Distribution of Number of Comments (Overall)",
x = "Number of Comments",
y = "Count") +
theme_hn() +
theme(plot.margin = margin(15, 15, 15, 15))
# up to which rank?
min_rank <- 160
# find ids of all stories that at some point reached rank 1
topstories %>%
filter(rank_at_timestamp == 1) %>%
select(id) %>%
unique() -> rank_one_joiner
# create a color scheme for maximum distinguishability
color_scheme <- sample(viridis::magma(dim(rank_one_joiner)[1]))
# plot data
topstories %>%
inner_join(rank_one_joiner, by = c("id")) %>%
mutate(rank_at_timestamp = as.numeric(rank_at_timestamp)) %>%
ggplot(aes(x = slice_timestamp, y = rank_at_timestamp, color = id)) +
geom_line(size = 0.2, alpha = 0.6) +
scale_color_manual(values = color_scheme) +
scale_y_continuous(trans = "reverse", limits = c(min_rank, 1)) +
theme_hn() +
theme(legend.position = "None") +
NULL
# up to which rank?
min_rank <- 160
# find ids of all stories that at some point reached rank 1
topstories %>%
filter(rank_at_timestamp == 1) %>%
select(id) %>%
unique() -> rank_one_joiner
# create a color scheme for maximum distinguishability
color_scheme <- sample(viridis::magma(dim(rank_one_joiner)[1]))
# plot data
topstories %>%
inner_join(rank_one_joiner, by = c("id")) %>%
mutate(rank_at_timestamp = as.numeric(rank_at_timestamp)) %>%
ggplot(aes(x = slice_timestamp, y = rank_at_timestamp, color = id)) +
geom_line(size = 0.2, alpha = 0.6) +
scale_color_manual(values = color_scheme) +
scale_y_continuous(trans = "reverse", limits = c(min_rank, 1)) +
labs(title = "Development of Stories that Reached Rank 1",
x = "Slice Timestamp",
y = "Rank") +
theme_hn() +
theme(legend.position = "None") +
NULL

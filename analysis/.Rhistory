data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
# geom_point(alpha = 0.3) +
geom_line() +
scale_color_continuous(type = grDevices::rainbow)
data_sample <- data %>% inner_join(head(id_selector, 20), by = "id")
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
# geom_point(alpha = 0.3) +
geom_line() +
scale_color_continuous(type = grDevices::rainbow(500))
grDevices::rainbow(500)
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
# geom_point(alpha = 0.3) +
geom_line() +
# scale_color_continuous(type = grDevices::rainbow(500))
scale_color_rainbow()
data_sample <- data %>% inner_join(head(id_selector, 20), by = "id")
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
# geom_point(alpha = 0.3) +
geom_line() +
# scale_color_continuous(type = grDevices::rainbow(500))
scale_color_gradient(low = "blue", high = "red")
data_sample <- data %>% inner_join(head(id_selector, 20), by = "id")
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
# geom_point(alpha = 0.3) +
geom_line() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(5))
NULL
data_sample <- data %>% inner_join(head(id_selector, 50), by = "id")
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
# geom_point(alpha = 0.3) +
geom_line() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(5))
NULL
data_sample <- data %>% inner_join(head(id_selector, 50), by = "id")
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
# geom_point(alpha = 0.3) +
geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(5))
NULL
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
geom_point(alpha = 0.3) +
# geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(5))
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
geom_point(alpha = 0.3) +
# geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(10))
data_sample <- get_sample(data, id_selector, 50)
get_sample <- function(data, id_selector, n) {
data %>%
inner_join(id_selector %>% sample_n(n), by = "id")
}
data_sample <- get_sample(data, id_selector, 50)
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
geom_point(alpha = 0.3) +
# geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(10))
data_sample <- get_sample(data, id_selector, 200)
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
geom_point(alpha = 0.3) +
# geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(10))
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
geom_jitter(alpha = 0.3) +
# geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(10))
data_sample <- get_sample(data, id_selector, 5)
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
geom_jitter(alpha = 0.3) +
# geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(10))
data_sample %>%
ggplot(aes(x = sample_time, y = score, color = rank, group = id)) +
geom_jitter(alpha = 0.3, width = 1.5) +
# geom_line() +
scale_y_log10() +
# scale_color_continuous(type = grDevices::rainbow(500))
# scale_color_gradient(low = "blue", high = "red") +
scale_color_gradientn(colours = rainbow(10))
# defaults and libraries
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
# defaults and libraries
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
data <- read.table(file.path("..", "data", "hn-data.tsv"), sep = "\t", header = TRUE)
data$rank %<>% as.numeric()
data %<>% mutate(age = sample_time - submission_time)
data
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
print("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
data
data %>% select(id) %>% unique()
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
print("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
print("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
get_first_n(data, id_selector, 3000)
get_first_n(data, id_selector, 3000)
cat("n is too large")
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
cat("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
get_first_n(data, id_selector, 3000)
warn("n is too large")
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
warn("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
warning("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
get_first_n(data, id_selector, 3000)
get_first_n(data, id_selector, 50000)
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
message("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
get_first_n(data, id_selector, 50000)
get_first_n(data, id_selector, 50000)
message("hallo")
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
message("n is too large")
return(NULL)
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
get_first_n(data, id_selector, 50000)
message("n is too large")
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(data)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
get_first_n(data, id_selector, 50000)
a <- get_first_n(data, id_selector, 50000)
a
stop("n is too large")
dim(data)[1]
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
}
get_first_n(data, id_selector, 50000)
get_first_n(data, id_selector, 3000)
get_first_n(data, id_selector, 2000)
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 360) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
# IDs of all stories that were less than 6 minutes old when they were first scraped
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
# subset the data by a random sample of IDs
get_random_sample <- function(data, id_selector, n) {
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, id_selector, 2000)
data %>% select(id) %>% unique()
get_first_n(data, id_selector, 2000)
get_first_n(data, id_selector, 100)
get_first_n(data, id_selector, 2500)
get_first_n(data, id_selector, 2400)
get_first_n(data, id_selector, 2300)
get_first_n(data, id_selector, 2200)
get_first_n(data, id_selector, 1800)
get_first_n(data, id_selector, 1900)
get_first_n(data, id_selector, 2000)
get_first_n(data, id_selector, 2100)
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
# subset the data by a random sample of IDs
get_random_sample <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, id_selector, 2100)
get_first_n(data, 2100)
get_random_sample(data, 2100)
get_first_n(data, 100)
get_random_sample(data, 100)
data %>%
aes(x = sample_time) +
geom_density()
data %>%
aes(x = as.numeric(sample_time)) +
geom_density()
data
data %>%
aes(x = as.numeric(sample_time)) +
geom_histogram()
data %>%
ggplot(aes(x = as.numeric(sample_time))) +
geom_density()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density() +
theme_hn()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density(color = "white", fill = "white") +
theme_hn()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
data
data$sample_time %>% as.POSIXct()
data$sample_time %>% as.POSIXct(origin = "1970-01-01")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01", tz = "CET")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01", tz = "GMT")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01", tz = "CET")
data %>%
mutate(sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"))
data %>%
mutate(sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
data <- read.table(file.path("..", "data", "hn-data.tsv"), sep = "\t", header = TRUE)
data$rank %<>% as.numeric()
data %<>%
mutate(age = sample_time - submission_time,
sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
# subset the data by a random sample of IDs
get_random_sample <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, 100)
get_random_sample(data, 100)
data %>%
ggplot(aes(x = submission_time_POSIX)) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
data
data$submission_time_POSIX[1]
data$submission_time_POSIX[1]
lubridate::as_datetime(data$submission_time_POSIX[1])
d <- lubridate::as_datetime(data$submission_time_POSIX[1])
minutes(d)
minute(d)
lubridateminute(d)
lubridate::minute(d)
lubridate::minute(data$submission_time_POSIX)
lubridate::time(data$submission_time_POSIX)
lubridate::as_date(data$submission_time_POSIX)
lubridate::dhours(data$submission_time_POSIX)
}
extract_clock_time <- function(datetime_vec) {
map(datetime_vec,
glue::glue("{lubridate::hour(x)}{lubridate::minute(x)}{lubridate::second(x)}"))
}
data %>% mutate(a = extract_clock_time(submission_time_POSIX))
extract_clock_time <- function(datetime_vec) {
extract_element <- function(x) {
glue::glue("{lubridate::hour(x)}{lubridate::minute(x)}{lubridate::second(x)}")
}
map(datetime_vec,
extract_element)
}
data %>% mutate(a = extract_clock_time(submission_time_POSIX))

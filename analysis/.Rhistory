data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, id_selector, n) {
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, id_selector, 2000)
data %>% select(id) %>% unique()
get_first_n(data, id_selector, 2000)
get_first_n(data, id_selector, 100)
get_first_n(data, id_selector, 2500)
get_first_n(data, id_selector, 2400)
get_first_n(data, id_selector, 2300)
get_first_n(data, id_selector, 2200)
get_first_n(data, id_selector, 1800)
get_first_n(data, id_selector, 1900)
get_first_n(data, id_selector, 2000)
get_first_n(data, id_selector, 2100)
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
# subset the data by a random sample of IDs
get_random_sample <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, id_selector, 2100)
get_first_n(data, 2100)
get_random_sample(data, 2100)
get_first_n(data, 100)
get_random_sample(data, 100)
data %>%
aes(x = sample_time) +
geom_density()
data %>%
aes(x = as.numeric(sample_time)) +
geom_density()
data
data %>%
aes(x = as.numeric(sample_time)) +
geom_histogram()
data %>%
ggplot(aes(x = as.numeric(sample_time))) +
geom_density()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density() +
theme_hn()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density(color = "white", fill = "white") +
theme_hn()
data %>%
ggplot(aes(x = as.numeric(submission_time))) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
data
data$sample_time %>% as.POSIXct()
data$sample_time %>% as.POSIXct(origin = "1970-01-01")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01", tz = "CET")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01", tz = "GMT")
data$sample_time[1:10] %>% as.POSIXct(origin = "1970-01-01", tz = "CET")
data %>%
mutate(sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"))
data %>%
mutate(sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
data <- read.table(file.path("..", "data", "hn-data.tsv"), sep = "\t", header = TRUE)
data$rank %<>% as.numeric()
data %<>%
mutate(age = sample_time - submission_time,
sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
# subset the data by a random sample of IDs
get_random_sample <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, 100)
get_random_sample(data, 100)
data %>%
ggplot(aes(x = submission_time_POSIX)) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
data
data$submission_time_POSIX[1]
data$submission_time_POSIX[1]
lubridate::as_datetime(data$submission_time_POSIX[1])
d <- lubridate::as_datetime(data$submission_time_POSIX[1])
minutes(d)
minute(d)
lubridateminute(d)
lubridate::minute(d)
lubridate::minute(data$submission_time_POSIX)
lubridate::time(data$submission_time_POSIX)
lubridate::as_date(data$submission_time_POSIX)
lubridate::dhours(data$submission_time_POSIX)
}
extract_clock_time <- function(datetime_vec) {
map(datetime_vec,
glue::glue("{lubridate::hour(x)}{lubridate::minute(x)}{lubridate::second(x)}"))
}
data %>% mutate(a = extract_clock_time(submission_time_POSIX))
extract_clock_time <- function(datetime_vec) {
extract_element <- function(x) {
glue::glue("{lubridate::hour(x)}{lubridate::minute(x)}{lubridate::second(x)}")
}
map(datetime_vec,
extract_element)
}
data %>% mutate(a = extract_clock_time(submission_time_POSIX))
startsWith("HOC", "HOCB")
startsWith("HOCB", "HOC")
?grepl
# defaults and libraries
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
# defaults and libraries
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
data <- read.table(file.path("..", "data", "hn-data-2.tsv"), sep = "\t", header = TRUE)
data$rank %<>% as.numeric()
data %<>%
mutate(age = sample_time - submission_time,
sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
data$rank %<>% as.numeric()
data %<>%
mutate(age = sample_time - submission_time,
sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
data
?write_rds
write_rds(data, file.path("..", "data", "hn-data-full.rds"), compress = "gz")
read_rds(file.path("..", "data", "hn-data-full.rds"))
data
read_rds(file.path("..", "data", "hn-data-full.rds"))
print("Yeeah")
if (!("hn-data-full.rds" %in% list.files(file.path("..", "data")))) {
print("Yeeah")
}
if (("hn-data-full.rds" %in% list.files(file.path("..", "data")))) {
print("Yeeah")
}
# defaults and libraries
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
if (!("hn-data-full.rds" %in% list.files(file.path("..", "data")))) {
data <- read.table(file.path("..", "data", "hn-data-2.tsv"), sep = "\t", header = TRUE)
data$rank %<>% as.numeric()
data %<>%
mutate(age = sample_time - submission_time,
sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
write_rds(data, file.path("..", "data", "hn-data-full.rds"), compress = "gz")
} else {
data <- read_rds(file.path("..", "data", "hn-data-full.rds"))
}
if (!("hn-data-full.rds" %in% list.files(file.path("..", "data")))) {
data <- read.table(file.path("..", "data", "hn-data-2.tsv"), sep = "\t", header = TRUE)
data$rank %<>% as.numeric()
data %<>%
mutate(age = sample_time - submission_time,
sample_time_POSIX = as.POSIXct(sample_time, origin = "1970-01-01", tz = "CET"),
submission_time_POSIX = as.POSIXct(submission_time, origin = "1970-01-01", tz = "CET"))
write_rds(data, file.path("..", "data", "hn-data-full.rds"), compress = "gz")
} else {
data <- read_rds(file.path("..", "data", "hn-data-full.rds"))
}
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
# subset the data by a random sample of IDs
get_random_sample <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, 100)
get_random_sample(data, 100)
get_first_n(data, 10000)
get_first_n(data, 100)
get_random_sample(data, 100)
d <- lubridate::as_datetime(data$submission_time_POSIX[1])
extract_clock_time <- function(datetime_vec) {
extract_element <- function(x) {
glue::glue("{lubridate::hour(x)}{lubridate::minute(x)}{lubridate::second(x)}")
}
map(datetime_vec,
extract_element)
}
data %>% mutate(a = extract_clock_time(submission_time_POSIX))
data %>%
ggplot(aes(x = submission_time_POSIX)) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
d <- lubridate::as_datetime(data$submission_time_POSIX[1])
d
data
data %>%
ggplot(aes(x = submission_time_POSIX)) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
# defaults and libraries
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(ggpubr)
source("helpers.R")
data2 <- read.table(file.path("..", "data", "hn-data-2.tsv"), sep = "\t", header = TRUE)
data2 %<>%
mutate(rank = as.numeric(rank),
age = sample_time - submission_time) %>%
mutate(subtime_datetime = lubridate::as_datetime(submission_time, tz = "CET"),
samptime_datetime = lubridate::as_datetime(sample_time, tz = "CET")) %>%
mutate(subtime_y = lubridate::year(subtime_datetime),
subtime_m = lubridate::month(subtime_datetime),
subtime_d = lubridate::day(subtime_datetime),
subtime_h = lubridate::hour(subtime_datetime),
subtime_m = lubridate::minute(subtime_datetime),
subtime_s = lubridate::second(subtime_datetime),
samptime_y = lubridate::year(samptime_datetime),
samptime_m = lubridate::month(samptime_datetime),
samptime_d = lubridate::day(samptime_datetime),
samptime_h = lubridate::hour(samptime_datetime),
samptime_m = lubridate::minute(samptime_datetime),
samptime_s = lubridate::second(samptime_datetime))
data2
data2$subtime_datetime[1] %>% lubridate::hms()
data2$subtime_datetime[1]
lubridate::hms("17:01:34")
data2 %>%
mutate(daytime = update(subtime_datetime, yday = 1))
data2 <- read.table(file.path("..", "data", "hn-data-2.tsv"), sep = "\t", header = TRUE)
data2 %<>%
mutate(rank = as.numeric(rank),
age = sample_time - submission_time) %>%
mutate(subtime_datetime = lubridate::as_datetime(submission_time, tz = "CET"),
samptime_datetime = lubridate::as_datetime(sample_time, tz = "CET")) %>%
mutate(subtime_y = lubridate::year(subtime_datetime),
subtime_m = lubridate::month(subtime_datetime),
subtime_d = lubridate::day(subtime_datetime),
subtime_h = lubridate::hour(subtime_datetime),
subtime_m = lubridate::minute(subtime_datetime),
subtime_s = lubridate::second(subtime_datetime),
samptime_y = lubridate::year(samptime_datetime),
samptime_m = lubridate::month(samptime_datetime),
samptime_d = lubridate::day(samptime_datetime),
samptime_h = lubridate::hour(samptime_datetime),
samptime_m = lubridate::minute(samptime_datetime),
samptime_s = lubridate::second(samptime_datetime)) %>%
mutate(daytime = update(subtime_datetime, yday = 1)) %>%
select(-c(submission_time, sample_time))
data2
if (!("hn-data-processed.rds" %in% list.files(file.path("..", "data")))) {
data2 <- read.table(file.path("..", "data", "hn-data-2.tsv"), sep = "\t", header = TRUE)
data2 %<>%
mutate(rank = as.numeric(rank),
age = sample_time - submission_time) %>%
mutate(subtime_datetime = lubridate::as_datetime(submission_time, tz = "CET"),
samptime_datetime = lubridate::as_datetime(sample_time, tz = "CET")) %>%
mutate(subtime_y = lubridate::year(subtime_datetime),
subtime_m = lubridate::month(subtime_datetime),
subtime_d = lubridate::day(subtime_datetime),
subtime_h = lubridate::hour(subtime_datetime),
subtime_m = lubridate::minute(subtime_datetime),
subtime_s = lubridate::second(subtime_datetime),
samptime_y = lubridate::year(samptime_datetime),
samptime_m = lubridate::month(samptime_datetime),
samptime_d = lubridate::day(samptime_datetime),
samptime_h = lubridate::hour(samptime_datetime),
samptime_m = lubridate::minute(samptime_datetime),
samptime_s = lubridate::second(samptime_datetime)) %>%
mutate(subtime_clocktime = update(subtime_datetime, yday = 1)) %>%
select(-c(submission_time, sample_time))
write_rds(data, file.path("..", "data", "hn-data-processed.rds"), compress = "gz")
} else {
data <- read_rds(file.path("..", "data", "hn-data-processed.rds"))
}
if (!("hn-data-processed.rds" %in% list.files(file.path("..", "data")))) {
data <- read.table(file.path("..", "data", "hn-data-2.tsv"), sep = "\t", header = TRUE)
data %<>%
mutate(rank = as.numeric(rank),
age = sample_time - submission_time) %>%
mutate(subtime_datetime = lubridate::as_datetime(submission_time, tz = "CET"),
samptime_datetime = lubridate::as_datetime(sample_time, tz = "CET")) %>%
mutate(subtime_y = lubridate::year(subtime_datetime),
subtime_m = lubridate::month(subtime_datetime),
subtime_d = lubridate::day(subtime_datetime),
subtime_h = lubridate::hour(subtime_datetime),
subtime_m = lubridate::minute(subtime_datetime),
subtime_s = lubridate::second(subtime_datetime),
samptime_y = lubridate::year(samptime_datetime),
samptime_m = lubridate::month(samptime_datetime),
samptime_d = lubridate::day(samptime_datetime),
samptime_h = lubridate::hour(samptime_datetime),
samptime_m = lubridate::minute(samptime_datetime),
samptime_s = lubridate::second(samptime_datetime)) %>%
mutate(subtime_clocktime = update(subtime_datetime, yday = 1)) %>%
select(-c(submission_time, sample_time))
write_rds(data, file.path("..", "data", "hn-data-processed.rds"), compress = "gz")
} else {
data <- read_rds(file.path("..", "data", "hn-data-processed.rds"))
}
rm(data2)
get_id_selector <- function(data) {
data %>%
filter(age < 120) %>%
select(id) %>%
unique() -> id_selector
return(id_selector)
}
# subset the data by a random sample of IDs
get_random_sample <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data %>% inner_join(id_selector %>% sample_n(n), by = "id")
}
# subset the data by the first n IDs that occurred
get_first_n <- function(data, n) {
id_selector <- get_id_selector(data)
if (dim(id_selector)[1] < n) {
stop("n is too large")
}
data_sample <- data %>% inner_join(head(id_selector, n), by = "id")
return(data_sample)
}
get_first_n(data, 100)
get_random_sample(data, 100)
data %>%
ggplot(aes(x = subtime_datetime)) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
data %>%
ggplot(aes(x = subtime_clocktime)) +
geom_density() +
theme_hn()
data %>%
ggplot(aes(x = subtime_clocktime)) +
geom_density(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
data %>%
group_by(samptime_datetime)
data %>%
group_by(samptime_datetime) %>%
filter(!is.na(rank))
data %>%
filter(!is.na(rank)) %>%
group_by(samptime_datetime) %>%
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30)
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
ggplot(aes(x = age)) +
geom_histogram()
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
ggplot(aes(x = age / 60)) +
geom_histogram()
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
ggplot(aes(x = age / 60 / 60)) +
geom_histogram()
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
ggplot(aes(x = age / 60 / 60)) +
geom_histogram(color = "white", fill = "white", alpha = 0.5) +
theme_hn()
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
ggplot(aes(x = age / 60 / 60)) +
geom_histogram(fill = "white", alpha = 0.5) +
theme_hn()
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
max(rank)
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
select(age) %>%
max()
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
select(age) %>%
max() / 60
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
select(age) %>%
max() / 60 / 60
data %>%
filter(!is.na(rank)) %>%
filter(rank <= 30) %>%
mutate(age_hours = age / 60 / 60) %>%
select(age_hours) %>%
max()
max_rank <- 50
data %>%
filter(!is.na(rank)) %>%
filter(rank <= max_rank) %>%
mutate(age_hours = age / 60 / 60) %>%
select(age_hours) %>%
max()
max_rank <- 100
data %>%
filter(!is.na(rank)) %>%
filter(rank <= max_rank) %>%
mutate(age_hours = age / 60 / 60) %>%
select(age_hours) %>%
max()
max_rank <- 500
data %>%
filter(!is.na(rank)) %>%
filter(rank <= max_rank) %>%
mutate(age_hours = age / 60 / 60) %>%
select(age_hours) %>%
max()
get_max_age <- function(data, max_rank) {
data %>%
filter(!is.na(rank)) %>%
filter(rank <= max_rank) %>%
mutate(age_hours = age / 60 / 60) %>%
select(age_hours) %>%
max()
}
get_max_age(data, 30)
get_max_age(data, 100)
get_max_age(data, 500)
